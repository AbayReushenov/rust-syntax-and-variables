// Функция first_word, возвращающая значение индекса байта в параметр String
fn first_word(s: &String) -> usize {
    // преобразуем нашу String в массив байтов с помощью метода as_bytes
    let bytes = s.as_bytes();

    // создаём итератор по массиву байт используя метод iter
    // iter — это метод, который возвращает каждый элемент в коллекции,
    // а enumerate оборачивает результат iter и вместо этого возвращает
    // каждый элемент как часть кортежа
    // Первый элемент кортежа, возвращаемый из enumerate, является индексом,
    // а второй элемент — ссылкой на элемент
    // мы указываем шаблон, имеющий i для индекса в кортеже и &item для одного байта в кортеже.
    for (i, &item) in bytes.iter().enumerate() {
        // ищем байт, представляющий пробел, используя синтаксис байтового литерала.
        if item == b' ' {
            return i;
        }
    }

    // В противном случае мы возвращаем длину строки с помощью s.len()
    s.len()
}

fn main() {
    let mut s = String::from("hello world");

    //  узнать индекс байта указывающего на конец первого слова в строке
    let word = first_word(&s); // word will get the value 5

    s.clear(); // this empties the String, making it equal to ""

    // Так как значение word совсем не связано с состоянием переменной s,
    // то word сохраняет своё значение 5 без изменений.
    // Мы бы могли воспользоваться значением 5 чтобы получить первое слово из переменной s,
    //  но это приведёт к ошибке, потому что содержимое s изменилось после того как
    // мы сохранили 5 в переменной word (стало пустой строкой в вызове s.clear()).

    // word still has the value 5 here, but s no longer has any content that we
    // could meaningfully use with the value 5, so word is now totally invalid!

    println!("Text {}", word)
}
