#![allow(unused)]
fn main() {
    let guess: u32 = "42".parse().expect("Not a number!");
    println!("The value of guess is: {guess}");
    // The value of guess is: 42

    let x = 2.0; // f64

    let y: f32 = 3.0; // f32

    println!("The value of x is: {x}");
    println!("The value of y is: {y}");
    // The value of x is: 2
    // The value of y is: 3

        // addition
        let sum = 5 + 10;

        // subtraction
        let difference = 95.5 - 4.3;

        // multiplication
        let product = 4 * 30;

        // division
        let quotient = 56.7 / 32.2;
        let truncated = -5 / 3; // Results in -1

        // remainder
        let remainder = 43 % 5;

        println!("The value of sum is: {sum}");
        println!("The value of difference is: {difference}");
        println!("The value of product is: {product}");
        println!("The value of quotient is: {quotient}");
        println!("The value of truncated is: {truncated}");
        println!("The value of remainder is: {remainder}");
        // The value of sum is: 15
        // The value of difference is: 91.2
        // The value of product is: 120
        // The value of quotient is: 1.7608695652173913
        // The value of truncated is: -1
        // The value of remainder is: 3

        // boolean
        let t = true;

        let f: bool = false; // with explicit type annotation

        println!("The value of t is: {t}");
        println!("The value of f is: {f}");
        // The value of t is: true
        // The value of f is: false

        // character
        let c = 'z';
        let z: char = '‚Ñ§'; // with explicit type annotation
        let heart_eyed_cat = 'üòª';

        println!("The value of c is: {c}");
        println!("The value of z is: {z}");
        println!("The value of heart_eyed_cat is: {heart_eyed_cat}");
        // The value of c is: z
        // The value of z is: ‚Ñ§
        // The value of heart_eyed_cat is: üòª

        // tuple
        let tup: (i32, f64, u8) = (500, 6.4, 1);

        println!("The value of tup is: {:?}", tup);
        // The value of tup is: (500, 6.4, 1)

        // tuple destructuring
        let (x, y, z) = tup;
        println!("The value of x is: {x}");
        println!("The value of y is: {y}");
        println!("The value of z is: {z}");
        // The value of x is: 500
        // The value of y is: 6.4
        // The value of z is: 1

        // tuple indexing
        let x: (i32, f64, u8) = (500, 6.4, 1);
        let five_hundred = x.0;
        let six_point_four = x.1;
        let one = x.2;

        println!("The value of five_hundred is: {five_hundred}");

        println!("The value of six_point_four is: {six_point_four}");
        println!("The value of one is: {one}");
        // The value of five_hundred is: 500
        // The value of six_point_four is: 6.4
        // The value of one is: 1

        // array
        let lla = [1, 2, 3, 4, 5];

        let lkk: [i32; 5] = [1, 2, 3, 4, 5];

        let plla = [3; 5];
        // –ú–∞—Å—Å–∏–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π a –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 3.
        // –î–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –∫–æ–¥—É let a = [3, 3, 3, 3, 3];, –Ω–æ —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–æ–π.

        println!("The value of lla is: {:?}", lla);
        println!("The value of lkk is: {:?}", lkk);
        println!("The value of plla is: {:?}", plla);
        // The value of lla is: [1, 2, 3, 4, 5]
        // The value of lkk is: [1, 2, 3, 4, 5]
        // The value of plla is: [3, 3, 3, 3, 3]

        // array indexing
        let a = [1, 2, 3, 4, 5];
        let first = a[0];
        let second = a[1];

        println!("The value of first is: {first}");
        println!("The value of second is: {second}");
        // The value of first is: 1
        // The value of second is: 2

        let months = ["January", "February", "March", "April", "May", "June", "July",
              "August", "September", "October", "November", "December"];

        println!("The value of months is: {:?}", months);
        // The value of months is: ["January", "February", "March", "April", "May", "June", "July", "August",
        // "September", "October", "November", "December"]

        let a = [3; 2];

        println!("The value of a is: {:?}", a);
        // The value of a is: [3, 3]

        let a = [1, 2, 3, 4, 5];
        let first = a[0];
        let second = a[1];
}



// –¢–∞–±–ª–∏—Ü–∞ 3-1: —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –≤ Rust

// –î–ª–∏–Ω–∞	–°–æ –∑–Ω–∞–∫–æ–º	–ë–µ–∑ –∑–Ω–∞–∫–∞
// 8 –±–∏—Ç	i8	u8
// 16 –±–∏—Ç	i16	u16
// 32 –±–∏—Ç–∞	i32	u32
// 64 –±–∏—Ç–∞	i64	u64
// 128 –±–∏—Ç	i128	u128
// –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ-–∑–∞–≤–∏—Å–∏–º–∞—è	isize	usize

// –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ –∑–Ω–∞–∫–æ–º –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–∞ –æ—Ç -(2 n - 1 ) –¥–æ 2 n - 1 - 1 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ,
// –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç.
// –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, i8 –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–∞ –æ—Ç -(2 7 ) –¥–æ 2 7 - 1, —á—Ç–æ —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –æ—Ç -128 –¥–æ 127.
// –í–∞—Ä–∏–∞–Ω—Ç—ã –±–µ–∑ –∑–Ω–∞–∫–∞ –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 2 n - 1, –ø–æ—ç—Ç–æ–º—É
// u8 –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 2 8 - 1, —á—Ç–æ —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –æ—Ç 0 –¥–æ 255.

// –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Ç–∏–ø—ã isize –∏ usize –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞,
// –∏ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–∞–∫ "arch": 64 –±–∏—Ç–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 64-–±–∏—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∏ 32 –±–∏—Ç–∞,
// –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 32-–±–∏—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞.
